/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddQuestionRequestDto
 */
export interface AddQuestionRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AddQuestionRequestDto
     */
    'questionText'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AddQuestionRequestDto
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AddQuestionRequestDto
     */
    'correctOption'?: number;
}
/**
 * 
 * @export
 * @interface CreateGameSessionRequestDto
 */
export interface CreateGameSessionRequestDto {
    /**
     * 
     * @type {number}
     * @memberof CreateGameSessionRequestDto
     */
    'quizId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGameSessionRequestDto
     */
    'roundTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateGameSessionRequestDto
     */
    'roundCooldownTime'?: number;
}
/**
 * 
 * @export
 * @interface CreateGameSessionResponseDto
 */
export interface CreateGameSessionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof CreateGameSessionResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateGameSessionResponseDto
     */
    'roomCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGameSessionResponseDto
     */
    'status'?: CreateGameSessionResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateGameSessionResponseDto
     */
    'createdAt'?: string;
}

export const CreateGameSessionResponseDtoStatusEnum = {
    Waiting: 'WAITING',
    InProgress: 'IN_PROGRESS',
    ShowingLeaderboard: 'SHOWING_LEADERBOARD',
    Finished: 'FINISHED'
} as const;

export type CreateGameSessionResponseDtoStatusEnum = typeof CreateGameSessionResponseDtoStatusEnum[keyof typeof CreateGameSessionResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface CreateQuizRequestDto
 */
export interface CreateQuizRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateQuizRequestDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuizRequestDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateQuizRequestDto
     */
    'createdBy'?: string;
}
/**
 * 
 * @export
 * @interface JoinGameSessionRequestDto
 */
export interface JoinGameSessionRequestDto {
    /**
     * 
     * @type {string}
     * @memberof JoinGameSessionRequestDto
     */
    'nickname'?: string;
}
/**
 * 
 * @export
 * @interface JoinGameSessionResponseDto
 */
export interface JoinGameSessionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof JoinGameSessionResponseDto
     */
    'playerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof JoinGameSessionResponseDto
     */
    'playerToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof JoinGameSessionResponseDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {number}
     * @memberof JoinGameSessionResponseDto
     */
    'gameSessionId'?: number;
}
/**
 * 
 * @export
 * @interface LeaderboardEntryDto
 */
export interface LeaderboardEntryDto {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardEntryDto
     */
    'nickname'?: string;
    /**
     * 
     * @type {number}
     * @memberof LeaderboardEntryDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface LiveQuestionResponseDto
 */
export interface LiveQuestionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof LiveQuestionResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LiveQuestionResponseDto
     */
    'questionText'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveQuestionResponseDto
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof LiveQuestionResponseDto
     */
    'maximumAllowedTime'?: number;
}
/**
 * 
 * @export
 * @interface PaginatedQuizResponseDto
 */
export interface PaginatedQuizResponseDto {
    /**
     * 
     * @type {Array<QuizListResponseDto>}
     * @memberof PaginatedQuizResponseDto
     */
    'quizzes'?: Array<QuizListResponseDto>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedQuizResponseDto
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedQuizResponseDto
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedQuizResponseDto
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedQuizResponseDto
     */
    'totalPages'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginatedQuizResponseDto
     */
    'last'?: boolean;
}
/**
 * 
 * @export
 * @interface QuestionResponseDto
 */
export interface QuestionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof QuestionResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponseDto
     */
    'questionText'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionResponseDto
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof QuestionResponseDto
     */
    'correctOption'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionResponseDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface QuizDetailResponseDto
 */
export interface QuizDetailResponseDto {
    /**
     * 
     * @type {number}
     * @memberof QuizDetailResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizDetailResponseDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizDetailResponseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizDetailResponseDto
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizDetailResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<QuestionResponseDto>}
     * @memberof QuizDetailResponseDto
     */
    'questions'?: Array<QuestionResponseDto>;
}
/**
 * 
 * @export
 * @interface QuizListResponseDto
 */
export interface QuizListResponseDto {
    /**
     * 
     * @type {number}
     * @memberof QuizListResponseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponseDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponseDto
     */
    'createdBy'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuizListResponseDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface SseEmitter
 */
export interface SseEmitter {
    /**
     * 
     * @type {number}
     * @memberof SseEmitter
     */
    'timeout'?: number;
}
/**
 * 
 * @export
 * @interface SubmitAnswerRequestDto
 */
export interface SubmitAnswerRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SubmitAnswerRequestDto
     */
    'playerToken'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubmitAnswerRequestDto
     */
    'selectedIndex'?: number;
}
/**
 * 
 * @export
 * @interface SubmitAnswerResponseDto
 */
export interface SubmitAnswerResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof SubmitAnswerResponseDto
     */
    'correct'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SubmitAnswerResponseDto
     */
    'responseTime'?: number;
}

/**
 * GameEventsControllerApi - axios parameter creator
 * @export
 */
export const GameEventsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} roomCode 
         * @param {string} playerToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEvents: async (roomCode: string, playerToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomCode' is not null or undefined
            assertParamExists('subscribeToEvents', 'roomCode', roomCode)
            // verify required parameter 'playerToken' is not null or undefined
            assertParamExists('subscribeToEvents', 'playerToken', playerToken)
            const localVarPath = `/api/v1/events/sessions/code/{roomCode}/subscribe`
                .replace(`{${"roomCode"}}`, encodeURIComponent(String(roomCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (playerToken !== undefined) {
                localVarQueryParameter['playerToken'] = playerToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameEventsControllerApi - functional programming interface
 * @export
 */
export const GameEventsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameEventsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} roomCode 
         * @param {string} playerToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeToEvents(roomCode: string, playerToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SseEmitter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeToEvents(roomCode, playerToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameEventsControllerApi.subscribeToEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameEventsControllerApi - factory interface
 * @export
 */
export const GameEventsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameEventsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} roomCode 
         * @param {string} playerToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEvents(roomCode: string, playerToken: string, options?: RawAxiosRequestConfig): AxiosPromise<SseEmitter> {
            return localVarFp.subscribeToEvents(roomCode, playerToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameEventsControllerApi - object-oriented interface
 * @export
 * @class GameEventsControllerApi
 * @extends {BaseAPI}
 */
export class GameEventsControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} roomCode 
     * @param {string} playerToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameEventsControllerApi
     */
    public subscribeToEvents(roomCode: string, playerToken: string, options?: RawAxiosRequestConfig) {
        return GameEventsControllerApiFp(this.configuration).subscribeToEvents(roomCode, playerToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameSessionControllerApi - axios parameter creator
 * @export
 */
export const GameSessionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateGameSessionRequestDto} createGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (createGameSessionRequestDto: CreateGameSessionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGameSessionRequestDto' is not null or undefined
            assertParamExists('createSession', 'createGameSessionRequestDto', createGameSessionRequestDto)
            const localVarPath = `/api/v1/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGameSessionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderboard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLeaderboard', 'id', id)
            const localVarPath = `/api/v1/sessions/{id}/leaderboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomCode 
         * @param {JoinGameSessionRequestDto} joinGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinSessionByRoomCode: async (roomCode: string, joinGameSessionRequestDto: JoinGameSessionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomCode' is not null or undefined
            assertParamExists('joinSessionByRoomCode', 'roomCode', roomCode)
            // verify required parameter 'joinGameSessionRequestDto' is not null or undefined
            assertParamExists('joinSessionByRoomCode', 'joinGameSessionRequestDto', joinGameSessionRequestDto)
            const localVarPath = `/api/v1/sessions/code/{roomCode}/join`
                .replace(`{${"roomCode"}}`, encodeURIComponent(String(roomCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinGameSessionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNextQuestion: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendNextQuestion', 'id', id)
            const localVarPath = `/api/v1/sessions/{id}/questions/next`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('startSession', 'id', id)
            const localVarPath = `/api/v1/sessions/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} questionId 
         * @param {SubmitAnswerRequestDto} submitAnswerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAnswer: async (id: number, questionId: number, submitAnswerRequestDto: SubmitAnswerRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('submitAnswer', 'id', id)
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('submitAnswer', 'questionId', questionId)
            // verify required parameter 'submitAnswerRequestDto' is not null or undefined
            assertParamExists('submitAnswer', 'submitAnswerRequestDto', submitAnswerRequestDto)
            const localVarPath = `/api/v1/sessions/{id}/questions/{questionId}/answer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"questionId"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitAnswerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameSessionControllerApi - functional programming interface
 * @export
 */
export const GameSessionControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameSessionControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateGameSessionRequestDto} createGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(createGameSessionRequestDto: CreateGameSessionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateGameSessionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(createGameSessionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaderboard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeaderboardEntryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaderboard(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.getLeaderboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} roomCode 
         * @param {JoinGameSessionRequestDto} joinGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinSessionByRoomCode(roomCode: string, joinGameSessionRequestDto: JoinGameSessionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinGameSessionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinSessionByRoomCode(roomCode, joinGameSessionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.joinSessionByRoomCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNextQuestion(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveQuestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNextQuestion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.sendNextQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSession(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSession(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.startSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} questionId 
         * @param {SubmitAnswerRequestDto} submitAnswerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAnswer(id: number, questionId: number, submitAnswerRequestDto: SubmitAnswerRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitAnswerResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitAnswer(id, questionId, submitAnswerRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameSessionControllerApi.submitAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameSessionControllerApi - factory interface
 * @export
 */
export const GameSessionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameSessionControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateGameSessionRequestDto} createGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(createGameSessionRequestDto: CreateGameSessionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateGameSessionResponseDto> {
            return localVarFp.createSession(createGameSessionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderboard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<LeaderboardEntryDto>> {
            return localVarFp.getLeaderboard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roomCode 
         * @param {JoinGameSessionRequestDto} joinGameSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinSessionByRoomCode(roomCode: string, joinGameSessionRequestDto: JoinGameSessionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<JoinGameSessionResponseDto> {
            return localVarFp.joinSessionByRoomCode(roomCode, joinGameSessionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNextQuestion(id: number, options?: RawAxiosRequestConfig): AxiosPromise<LiveQuestionResponseDto> {
            return localVarFp.sendNextQuestion(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} questionId 
         * @param {SubmitAnswerRequestDto} submitAnswerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAnswer(id: number, questionId: number, submitAnswerRequestDto: SubmitAnswerRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<SubmitAnswerResponseDto> {
            return localVarFp.submitAnswer(id, questionId, submitAnswerRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameSessionControllerApi - object-oriented interface
 * @export
 * @class GameSessionControllerApi
 * @extends {BaseAPI}
 */
export class GameSessionControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateGameSessionRequestDto} createGameSessionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public createSession(createGameSessionRequestDto: CreateGameSessionRequestDto, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).createSession(createGameSessionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public getLeaderboard(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).getLeaderboard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roomCode 
     * @param {JoinGameSessionRequestDto} joinGameSessionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public joinSessionByRoomCode(roomCode: string, joinGameSessionRequestDto: JoinGameSessionRequestDto, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).joinSessionByRoomCode(roomCode, joinGameSessionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public sendNextQuestion(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).sendNextQuestion(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public startSession(id: number, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).startSession(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} questionId 
     * @param {SubmitAnswerRequestDto} submitAnswerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameSessionControllerApi
     */
    public submitAnswer(id: number, questionId: number, submitAnswerRequestDto: SubmitAnswerRequestDto, options?: RawAxiosRequestConfig) {
        return GameSessionControllerApiFp(this.configuration).submitAnswer(id, questionId, submitAnswerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizControllerApi - axios parameter creator
 * @export
 */
export const QuizControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {AddQuestionRequestDto} addQuestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion: async (quizId: number, addQuestionRequestDto: AddQuestionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('addQuestion', 'quizId', quizId)
            // verify required parameter 'addQuestionRequestDto' is not null or undefined
            assertParamExists('addQuestion', 'addQuestionRequestDto', addQuestionRequestDto)
            const localVarPath = `/api/v1/quizzes/{quizId}/questions`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addQuestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateQuizRequestDto} createQuizRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuiz: async (createQuizRequestDto: CreateQuizRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createQuizRequestDto' is not null or undefined
            assertParamExists('createQuiz', 'createQuizRequestDto', createQuizRequestDto)
            const localVarPath = `/api/v1/quizzes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuizRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizzes: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/quizzes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuiz: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQuiz', 'id', id)
            const localVarPath = `/api/v1/quizzes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizControllerApi - functional programming interface
 * @export
 */
export const QuizControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {AddQuestionRequestDto} addQuestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addQuestion(quizId: number, addQuestionRequestDto: AddQuestionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addQuestion(quizId, addQuestionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.addQuestion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateQuizRequestDto} createQuizRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuiz(createQuizRequestDto: CreateQuizRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuiz(createQuizRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.createQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllQuizzes(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedQuizResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllQuizzes(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.getAllQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuiz(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDetailResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuiz(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizControllerApi.getQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizControllerApi - factory interface
 * @export
 */
export const QuizControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} quizId 
         * @param {AddQuestionRequestDto} addQuestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addQuestion(quizId: number, addQuestionRequestDto: AddQuestionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<QuizDetailResponseDto> {
            return localVarFp.addQuestion(quizId, addQuestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateQuizRequestDto} createQuizRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuiz(createQuizRequestDto: CreateQuizRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<QuizDetailResponseDto> {
            return localVarFp.createQuiz(createQuizRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuizzes(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedQuizResponseDto> {
            return localVarFp.getAllQuizzes(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuiz(id: number, options?: RawAxiosRequestConfig): AxiosPromise<QuizDetailResponseDto> {
            return localVarFp.getQuiz(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizControllerApi - object-oriented interface
 * @export
 * @class QuizControllerApi
 * @extends {BaseAPI}
 */
export class QuizControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} quizId 
     * @param {AddQuestionRequestDto} addQuestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public addQuestion(quizId: number, addQuestionRequestDto: AddQuestionRequestDto, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).addQuestion(quizId, addQuestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateQuizRequestDto} createQuizRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public createQuiz(createQuizRequestDto: CreateQuizRequestDto, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).createQuiz(createQuizRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public getAllQuizzes(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).getAllQuizzes(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizControllerApi
     */
    public getQuiz(id: number, options?: RawAxiosRequestConfig) {
        return QuizControllerApiFp(this.configuration).getQuiz(id, options).then((request) => request(this.axios, this.basePath));
    }
}



